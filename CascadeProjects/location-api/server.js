const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
const path = require('path');

// Import des routes
const logementRoutes = require('./routes/logements');

const app = express();
const PORT = process.env.PORT || 3002;

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, 'public')));

// Connexion √† MongoDB Atlas
const MONGODB_URI = 'mongodb+srv://julesdemont11:HeLBGukZAGQqMWKC@projettw.ithdu0i.mongodb.net/locationDB?retryWrites=true&w=majority';

console.log('Tentative de connexion √† MongoDB...');

// Configuration de la connexion
const mongooseOptions = {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    serverSelectionTimeoutMS: 30000, // Augment√© √† 30 secondes
    socketTimeoutMS: 45000,
    connectTimeoutMS: 30000, // Augment√© √† 30 secondes
    family: 4, // Force IPv4
    maxPoolSize: 10, // Limite le nombre de connexions simultan√©es
    serverSelectionTimeoutMS: 30000, // D√©lai d'attente pour la s√©lection du serveur
    heartbeatFrequencyMS: 10000, // Fr√©quence des messages de pulsation
};

// D√©sactive le buffering des commandes
mongoose.set('bufferCommands', false);

// Gestion des √©v√©nements de connexion
mongoose.connection.on('connecting', () => {
    console.log('MongoDB: Tentative de connexion...');
});

mongoose.connection.on('connected', () => {
    console.log('‚úÖ MongoDB: Connect√© avec succ√®s');
    console.log(`Base de donn√©es: ${mongoose.connection.name}`);
    console.log(`H√¥te: ${mongoose.connection.host}`);
});

mongoose.connection.on('error', (err) => {
    console.error('‚ùå Erreur de connexion MongoDB:', err.message);
    if (err.name === 'MongoNetworkError') {
        console.error('Erreur r√©seau - V√©rifiez votre connexion Internet');
    }
});

mongoose.connection.on('disconnected', () => {
    console.log('MongoDB: D√©connect√©');
});

// Routes
app.use('/api/logements', logementRoutes);

// Route principale - Redirige vers index.html
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Gestion des erreurs globale
app.use((err, req, res, next) => {
    console.error('Erreur non g√©r√©e:', err);
    res.status(500).json({ error: 'Une erreur est survenue', details: err.message });
});

// Connexion √† MongoDB et d√©marrage du serveur
async function startServer() {
    try {
        console.log('Connexion √† MongoDB Atlas...');
        await mongoose.connect(MONGODB_URI, mongooseOptions);
        
        // D√©marrer le serveur uniquement apr√®s la connexion √† MongoDB
        app.listen(PORT, () => {
            console.log(`‚úÖ Serveur d√©marr√© sur http://localhost:${PORT}`);
            console.log(`üì° API disponible sur http://localhost:${PORT}/api/logements`);
        });
    } catch (error) {
        console.error('‚ùå Impossible de d√©marrer le serveur:', error);
        process.exit(1);
    }
}

// D√©marrer l'application
startServer();
